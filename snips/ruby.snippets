extends ruby, ruby-rails, ruby-minitest, ruby-rspec

snippet #f "" b
# frozen_string_literal: true

endsnippet

snippet "cla(ss)?" "" br
class ${1:`!v user#snips#filename_camelized()`}${2}
  ${0:${VISUAL}}
end
endsnippet

snippet defi "def initialize()" b
def initialize${1:(${2})}
  `!p
snip.rv = "\n".join(
  map(lambda x:
    re.sub('([a-z][a-z0-9]*)[ =:,]*.*', '@\g<1> = \g<1>', x.strip()), t[2].split(',')
  )
)`
end
endsnippet

snippet "deb(ug)?" "require 'byebug'; byebug" r
require 'byebug'; byebug
endsnippet

snippet pry "binding.pry" w
binding.pry
endsnippet

snippet def "def method()" b
def ${1:name${2:(${3})}}
  ${0:${VISUAL}}
end
endsnippet

snippet do
do
  ${0:${VISUAL}}
end
endsnippet

snippet dop
do |${1:param}|
  ${0:${VISUAL}}
end
endsnippet

snippet "mod(ule)*" "" br
module ${1:`!v user#snips#filename_camelized()`}
  ${0:${VISUAL}}
end
endsnippet

snippet hri
puts '${1:-}' * 80
endsnippet

snippet hr
puts '${1:*}' * 80
p ${0:${VISUAL}}
puts '$1' * 80
endsnippet

snippet pm "" b
puts "[KBM][#{self}.#{__method__}]$1"
endsnippet

snippet if
if $1
  ${0:${VISUAL}}
end
endsnippet

snippet "JSON(\.parse)*" "" r
JSON.parse(${0:${VISUAL}}${1:, symbolize_names: true})
endsnippet

snippet "(rubo|#r)" "rubocop" r
# rubocop: disable CodeReuse/ActiveRecord
endsnippet
